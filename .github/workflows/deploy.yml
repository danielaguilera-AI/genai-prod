name: Terraform Apply, Build & Push to ECR, Deploy to ECS

on:
  push:
    branches: [ main ]

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    outputs:
      ecr_url: ${{ steps.terraform-output.outputs.ecr_url }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Initialize Terraform
        working-directory: ./terraform
        run: terraform init

      - name: Apply Terraform
        working-directory: ./terraform
        run: terraform destroy

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: terraform-apply

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image
        env:
          ECR_REGISTRY: ${{ env.ECR_URL }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY:$IMAGE_TAG .
          docker push $ECR_REGISTRY:$IMAGE_TAG

      - name: Update ECS Service
        env:
          AWS_REGION: us-east-1
          CLUSTER_NAME: llm-cluster
          SERVICE_NAME: llm-service
          CONTAINER_NAME: fastapi-container
          ECR_IMAGE: ${{ env.ECR_URL }}:latest
        run: |
          aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment



